<?xml version="1.0"?>
<project name="cloud_service_provider_connectors" basedir="./" default="clean-build">


	<property file="${basedir}/build.properties"/>
	<property name="version" value="1.0"/>
	<property name="base.dir" value="${basedir}/.."/>
	<property name="src.dir" value="${base.dir}/src"/>
	<property name="test.dir" value="${base.dir}/tests"/>
	<property name="build.dir" value="${base.dir}/build"/>
	<property name="classes.dir" value="${build.dir}/classes"/>
	<property name="classes.test.dir" value="${build.dir}/test-classes"/>
	<property name="dist.dir" value="${base.dir}/dist"/>
	<property name="scheduling.project.lib.dir" value="${scheduling.project.dir}/dist/lib"/>
	<property name="lib.dir" value="${base.dir}/lib"/>
	<property name="test.tmp.dir" value="${base.dir}/tmp"/>
	<property name="scheduling.lib.dir" value="${lib.dir}/scheduling"/>
	<property name="junit.grant.all.policy" value="${test.dir}/grant-all-java.security.policy" />
	<property name="main-class" value="Starter"/>

	<import file="../doc/src/build.xml" optional="true"/>

	<target name="copy.dependencies" description="Copy dependencies on other modules">
		<condition property="scheduling.project.lib.dir.exists">
			<available file="${scheduling.project.lib.dir}" type="dir" />
		</condition>
		<fail message="scheduling project lib directory does not exists: ${scheduling.project.lib.dir}" unless="scheduling.project.lib.dir.exists"/>
		<mkdir dir="${lib.dir}"/>
		<mkdir dir="${scheduling.lib.dir}"/>
		<copy todir="${scheduling.lib.dir}">
			<fileset dir="${scheduling.project.lib.dir}" includes="**/*.jar,**/*.so" excludes="typica.jar,vim25.jar"/>
		</copy>
	</target>

	<path id="classpath">
		<fileset dir="${scheduling.lib.dir}" includes="**/*.jar"/>
		<fileset dir="${lib.dir}" includes="**/*.jar"/>
	</path>

	<path id="classpath.test">
		<path refid="classpath"/>
		<pathelement location="${classes.test.dir}"/>
		<pathelement location="${classes.dir}"/>
	</path>

	<target name="clean" description="Clean build folders" depends="doc.clean">
		<delete dir="${test.tmp.dir}"/>
		<delete dir="${build.dir}"/>
		<delete dir="${dist.dir}"/>
		<delete dir="${lib.dir}/scheduling"/>
	</target>

	<target name="compile" depends="copy.dependencies" description="Compile">
		<mkdir dir="${classes.dir}"/>
		<copy todir="${classes.dir}">
			<fileset dir="../src" includes="**/*.xml,**/*.properties,**/*.txt,**/*.ico,**/start-proactive-node"/>
		</copy>
		<javac srcdir="${src.dir}" destdir="${classes.dir}" classpathref="classpath" debug="on"
			   debuglevel="lines,vars,source" includeantruntime="false"/>
	</target>

	<target name="dist" depends="compile, test" description="Build jar">
		<mkdir dir="${dist.dir}"/>
		<jar destfile="${dist.dir}/cloud_service_provider_connectors-${version}.jar" basedir="${classes.dir}"/>
	</target>

	<target name="clean-build" depends="clean,dist" description="Clean and build jar"/>
	<target name="jar" depends="dist"/>

	<target name="test" depends="compile" description="Run unit tests">
		<mkdir dir="${classes.test.dir}"/>
		<javac srcdir="${test.dir}" destdir="${classes.test.dir}" classpathref="classpath.test"
			   includeantruntime="false"/>

		<copy todir="${classes.test.dir}">
			<fileset dir="${test.dir}" includes="**/*.policy,**/*.xml,**/*.properties,**/*.txt"/>
		</copy>

		<junit haltonfailure="true">
			<jvmarg value="-Djava.security.policy=${junit.grant.all.policy}"/>					
			<jvmarg value="-Dscheduling.project.dir=${scheduling.project.dir}"/>					
			<classpath refid="classpath.test"/>
			<formatter type="brief" usefile="false"/>
			<batchtest fork="yes">
				<fileset dir="${test.dir}">
					<include name="**/*Test*" />
				</fileset>
			</batchtest>
		</junit>
	</target>

</project>
